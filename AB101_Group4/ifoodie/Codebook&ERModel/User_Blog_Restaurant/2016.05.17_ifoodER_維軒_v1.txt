使用者
約每300筆一個檔案
*blog_type是用來分辨不同網站的blog要再寫規則去定義,初步用主域做分類即可
{	user:[
		{	
		新
			fav_cnt				:	分類清單-收藏清單的總數量   
			follower_cnt		:	擁有的粉絲總數量  
			display_name		:	愛食記上的使用者名稱
			following_cnt		:	追蹤別人的總數  
			post_cnt			:	當下食記總篇數  
			profile_pic_origin	:	大頭照的原始圖檔-staticflickr or facebook   
			browse_cnt			:	文章被瀏覽總次數  
			checkin_cnt			:	?????動態總次數?????  
			fans_id_list[]		:	粉絲id所成的陣列  
			_id   				:	使用者id   
			certified   		:	?????證明合格? 新帳號沒發食記過食記，似乎就不會被認證?????  
			blog_id_list   		:	文章id(愛食記)所成的陣列  
			
		
		
		
		
		
		舊
			i_id,
			follower_cnt,
			display_name,
			post_cnt,
			browse_cnt,
			checkin_cnt,
			certified,
			fans:[fan_id,...],
			blog:{blog_id,
				*blog_type,
				share_cnt,
				recommend_cnt,
				title,
				url,
				restaurant_id,
				}
			collection:[restaurant_id,...]
			recommendation:[restaurant_id,...]
			visit:[restaurant_id,...]
		},
		
		...
	]
	
}

餐聽
爬使用者資料時就會順便爬到，每300筆使用者所挖出的餐廳資訊存成一個檔案
會重覆，但還不確定重複時資料會不會一致，若會不一致就看last_visit時間選最新的
{	restaurant:[
		{	restaurant_id,
			city,
			name,
			address,
			opening_hours,
			blog_count,
			phone,
			admin_name,
			visit_cnt,
			avg_price,
			lat,
			lng,
			last_visit,
		},
		...
	]
}

blog
其實裡面的資訊大都是爬使用者時順便爬到的
這邊主要是依據不同url的blog_type去爬文章內容
做到這邊資料庫應該也好了
可以一篇blog一個檔案，也可以直接灌進資料庫，再看狀況
{
	新
	blog_type   	:   部落格種類(如:leafphoto.pixnet.net)
	title   		:	在愛食記文章的標題
	url   			:   食記原始的完整網址(如:http://leafphoto.pixnet.net/blog/post/32917623)
	timestamp   	:   抓取時間
	is_paid   		:   是否為邀約文章(Ture or False)
	recommend_cnt   :   0
	browse_cnt   	:   32
	favorite_cnt	:   0
	share_cnt   	:   0
	date   			:   1288166400.0
	_id   			:   55e6aa4ba870258966000222
	restaurant_id   :   55e73ad62756dd0ea62938e8
	
	
	舊
	blog_id,
	*blog_type,
	share_cnt,
	recommend_cnt,
	title,
	url,
	restaurant_id,
	text,
}
